%implements s0_b0_7n9sr_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl

real_T TmpSignalConversionAtSFunction2;
%closefile localVarDecl
%assign tlcOutputsFcnOfS0B0 = OpaqueTLCBlockFcn("Outputs", 0, 0, 0, 2, 0)
%assign tlcOutputsFcnOfS0B1 = OpaqueTLCBlockFcn("Outputs", 0, 1, 0, 2, 1)
%assign tlcOutputsFcnOfS0B2 = OpaqueTLCBlockFcn("Outputs", 0, 2, 0, 2, 2)
%assign tlcOutputsFcnOfS0B3 = OpaqueTLCBlockFcn("Outputs", 0, 3, 0, 2, 3)
%assign tlcOutputsFcnOfS0B4 = OpaqueTLCBlockFcn("Outputs", 0, 4, 0, 2, 4)
%assign tlcOutputsFcnOfS0B5 = OpaqueTLCBlockFcn("Outputs", 0, 5, 0, 2, 5)
%<SLibGetRootInportsFromFile(system, TLC_FALSE)>
/* Sin: '<Root>/Sine Wave2' incorporates:
 *  Sin: '<Root>/Sine Wave'
 *  Sin: '<Root>/Sine Wave1'
 *  Sin: '<Root>/Sine Wave3'
 */
TmpSignalConversionAtSFunction2 = %<(SLibCG_SE(LibGetTaskTime(0)))>;
/* SignalConversion generated from: '<Root>/S-Function2' incorporates:
 *  Sin: '<Root>/Sine Wave2'
 *  Sin: '<Root>/Sine Wave3'
 */
rtB.TmpSignalConversionAtSFunction2[0] = sin(rtP.SineWave2_Freq * TmpSignalConversionAtSFunction2 + rtP.SineWave2_Phase) * rtP.SineWave2_Amp + rtP.SineWave2_Bias;
rtB.TmpSignalConversionAtSFunction2[1] = sin(rtP.SineWave3_Freq * TmpSignalConversionAtSFunction2 + rtP.SineWave3_Phase) * rtP.SineWave3_Amp + rtP.SineWave3_Bias;
%if !WHITE_SPACE(tlcOutputsFcnOfS0B0)
/* S-Function (cTest3): '<Root>/S-Function2' */
%<tlcOutputsFcnOfS0B0>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS0B1)
/* Scope: '<Root>/Scope2' */
%<tlcOutputsFcnOfS0B1>\
%endif
/* Sin: '<Root>/Sine Wave' */
rtB.u = sin(rtP.SineWave_Freq * TmpSignalConversionAtSFunction2 + rtP.SineWave_Phase) * rtP.SineWave_Amp + rtP.SineWave_Bias;
%if !WHITE_SPACE(tlcOutputsFcnOfS0B2)
/* S-Function (Sfunction_Test1): '<Root>/S-Function' */
%<tlcOutputsFcnOfS0B2>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS0B3)
/* Scope: '<Root>/Scope' */
%<tlcOutputsFcnOfS0B3>\
%endif
/* Sin: '<Root>/Sine Wave1' */
rtB.u_e = sin(rtP.SineWave1_Freq * TmpSignalConversionAtSFunction2 + rtP.SineWave1_Phase) * rtP.SineWave1_Amp + rtP.SineWave1_Bias;
%if !WHITE_SPACE(tlcOutputsFcnOfS0B4)
/* S-Function (cTest2): '<Root>/S-Function1' */
%<tlcOutputsFcnOfS0B4>\
%endif
%if !WHITE_SPACE(tlcOutputsFcnOfS0B5)
/* Scope: '<Root>/Scope1' */
%<tlcOutputsFcnOfS0B5>\
%endif
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
%function OutputsFcnProtoType(block, system) Output
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 2, fcnProtoType)>
%endfunction
